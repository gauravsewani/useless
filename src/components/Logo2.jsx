/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 logo.glb --transform 
Files: logo.glb [221.21KB] > logo-transformed.glb [13.18KB] (94%)
*/

import { useGLTF, useScroll } from "@react-three/drei";
import { gsap } from "gsap";
import { useEffect, useLayoutEffect, useState } from "react";
import { useRef } from "react";
import { useFrame, useThree } from "react-three-fiber";

export function Model(props) {
  const scroll = useScroll();
  const tl = useRef();
  const meshRef = useRef();
  const { size } = useThree();
  const [scale, setScale] = useState(4);
  const [yPosition, setYPosition] = useState(0);
  const [xPosition, setXPosition] = useState(0);

  useFrame((state, delta) => {
    tl.current.seek(scroll.offset * tl.current.duration());
  });

  useLayoutEffect(() => {
    tl.current = gsap.timeline({});
    tl.current
      .set(meshRef.current?.position, { x: xPosition, y: yPosition, z: -4 }, 0)
      .set(meshRef.current?.scale, { x: scale, y: scale, z: scale }, 0)
      .to(meshRef.current?.position, { y: 15 }, "1%");
  }, [scale, yPosition]);

  useEffect(() => {
    function handleResize() {
      if (size.width < 400) {
        setScale(1);
        setXPosition(0);
        setYPosition(3);
      } else if (size.width < 640) {
        setScale(1.5);
        setXPosition(0.03);
        setYPosition(2.5);
      } else if (size.width < 768) {
        setScale(2);
        setXPosition(0.06);
        setYPosition(2);
      } else if (size.width < 1024) {
        setScale(2.5);
        setXPosition(-0.09);
        setYPosition(1.5);
      } else if (size.width < 1280) {
        setScale(3);
        setXPosition(0.12);
        setYPosition(1);
      } else if (size.width < 1536) {
        setScale(6);
        setXPosition(0.15);
        setYPosition(0.5);
      } else {
        setScale(4);
        setXPosition(0.2);
        setYPosition(0);
      }
    }

    // Call the handleResize function on component mount and window resize
    handleResize();
    window.addEventListener("resize", handleResize);

    // Clean up the event listener on component unmount
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, [size.width]);

  const { nodes, materials } = useGLTF("/models/logo2/logo-transformed.glb");
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Body002.geometry}
        material={materials["Procedural Abstract Sci-Fi Tech 2.0"]}
        position={[0.245, 0.379, -0.782]}
        scale={[0.245, 0.234, 0.37]}
      />
      <mesh
        geometry={nodes.Body004.geometry}
        material={materials["Violet Glass"]}
        position={[0.245, 0.379, -0.778]}
        scale={[0.245, 0.234, 0.37]}
      />
      <mesh
        geometry={nodes.Text001.geometry}
        material={materials["Sci-Fi Emission"]}
        position={[-0.009, 0.368, 0.096]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.915, 0.559, 0.915]}
      />
    </group>
  );
}

useGLTF.preload("/models/logo2/logo-transformed.glb");
